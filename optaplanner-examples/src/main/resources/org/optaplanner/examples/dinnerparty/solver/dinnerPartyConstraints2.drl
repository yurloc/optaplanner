/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.dinnerparty.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.simple.SimpleScoreHolder;

import org.optaplanner.examples.dinnerparty.app.DroolsReproducerTest.HobbyPractician;
import org.optaplanner.examples.dinnerparty.app.DroolsReproducerTest.SeatDesignation;

global SimpleScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// Each person must share a hobby with his/her left neighbour
// (so also the same or another hobby with his/her right neighbour)
rule "leftHasHobbyInCommon"
    when
        $leftDesignation : SeatDesignation($leftGuest : guest)
        $rightDesignation : SeatDesignation(isRightOf($leftDesignation), $rightGuest : guest)
        not (
            HobbyPractician(guest == $leftGuest, $leftHobby : hobby)
            and HobbyPractician(guest == $rightGuest, hobby == $leftHobby)
        )
    then
        scoreHolder.addConstraintMatch(kcontext, -100);
end
