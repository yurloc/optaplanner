/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.dinnerparty.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.simple.SimpleScoreHolder;

import org.optaplanner.examples.dinnerparty.domain.JobType;
import org.optaplanner.examples.dinnerparty.domain.SeatDesignation;
import org.optaplanner.examples.dinnerparty.domain.Table;

global SimpleScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// Maintain a boy-girl-boy-girl seating arrangement is obsolete because it's build into the moves

// 1 democrat and 1 republican = 2 politians at each table but NOT two of the same kind
// 2 doctors at each table but NOT two of the same kind
// 2 coaches at each table but NOT two of the same kind
// 2 programmers at each table but NOT two of the same kind
// 2 socialites at each table
// 2 teachers at each table
rule "twoSameJobTypePerTable"
    when
        $jobType : JobType()
        $table : Table()
        not (
            SeatDesignation(guestJobType == $jobType, seatTable == $table, $leftId : id, $firstJob : guestJob)
            and SeatDesignation(guestJobType == $jobType, seatTable == $table, id > $leftId,
                    differentKindIfNeeded($firstJob))
        )
    then
        scoreHolder.addConstraintMatch(kcontext, -100);
end
